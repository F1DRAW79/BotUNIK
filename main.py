import random
import bs4
import requests
import telebot
from telebot import types
from mg import get_map_cell

bot = telebot.TeleBot('5145230333:AAH-IggKJMLgic6NvoLvSxqriBGWTMadJqM')
first = ["–ì–æ–¥ –¥–ª—è –≤–∞—Å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏. –í—Å–µ –æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –æ–ø–∞—Å–∞—Ç—å—Å—è –∏—Ö –Ω–µ —Å—Ç–æ–∏—Ç",
         "–í—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –≤ —Å–µ–±–µ —Å–∫—Ä—ã—Ç—ã–µ —Ä–µ–∑–µ—Ä–≤—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–µ—à–∏—Ç—å—Å—è –Ω–∞ —Å–∞–º—ã–µ –±–µ–∑—É–º–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏."]
second = ["–°–µ–π—á–∞—Å —É–¥–∞—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –≤ –ª—é–±–≤–∏. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é", "–°—á–∞—Å—Ç—å–µ —É–∂–µ —Å—Ç–æ–∏—Ç –∑–∞ –¥–≤–µ—Ä—å—é."]
second_2 = [
    "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º—ã–µ –≤–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —É—Å–ø–µ—Ö –≤ –¥–µ–ª–∞—Ö –∏ —è—Ä–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–º –∑–∞–≤–∏—Å—Ç–∏",
    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Å—Ç–∏ –≥–ª–∞–∑ –æ—Ç —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç—ã!"]
third = ["–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Å—Ç–∏ –≥–ª–∞–∑ –æ—Ç —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç—ã!", "–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–∞–∫–∏—Ö —É–º–Ω—ã—Ö –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–≤—É—à–µ–∫."]

cols, rows = 8, 8

keyboard = telebot.types.InlineKeyboardMarkup()
keyboard.row(telebot.types.InlineKeyboardButton('‚Üê', callback_data='left'),
             telebot.types.InlineKeyboardButton('‚Üë', callback_data='up'),
             telebot.types.InlineKeyboardButton('‚Üì', callback_data='down'),
             telebot.types.InlineKeyboardButton('‚Üí', callback_data='right'))

maps = {}


def get_map_str(map_cell, player):
    map_str = ""
    for y in range(rows * 2 - 1):
        for x in range(cols * 2 - 1):
            if map_cell[x + y * (cols * 2 - 1)]:
                map_str += "‚¨õ"
            elif (x, y) == player:
                map_str += "üî¥"
            else:
                map_str += "‚¨ú"
        map_str += "\n"

    return map_str


# ----------------------------------------------------------------------
@bot.message_handler(commands=["start"])
def start(message, res=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–°–æ–∑–¥–∞–π —Å–≤–æ–π –Ω–∏–∫')
    item2 = types.KeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø')
    item3 = types.KeyboardButton('–ê–Ω–µ–∫–¥–æ—Ç—ã')
    item4 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å–∏—á–∫—É')
    item5 = types.KeyboardButton('–ò–≥—Ä–∞')
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç,{0.first_name}!'.format(message.from_user), reply_markup=markup)



@bot.message_handler(content_types=['text'])

def play_message(message):
    if message.text == "–ò–≥—Ä–∞":
        cols, rows = 8, 8

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.row(telebot.types.InlineKeyboardButton('‚Üê', callback_data='left'),
                     telebot.types.InlineKeyboardButton('‚Üë', callback_data='up'),
                     telebot.types.InlineKeyboardButton('‚Üì', callback_data='down'),
                     telebot.types.InlineKeyboardButton('‚Üí', callback_data='right'))
        map_cell = get_map_cell(cols, rows)

        user_data = {
            'map': map_cell,
            'x': 0,
            'y': 0
            }

        maps[message.chat.id] = user_data

        bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard)
    elif message.text == '–ì–æ—Ä–æ—Å–∫–æ–ø':
        bot.send_message(message.from_user.id, "—Å–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        keyboard = types.InlineKeyboardMarkup()
        key_oven = types.InlineKeyboardButton(text='–û–≤–µ–Ω', callback_data='zodiac')
        keyboard.add(key_oven)
        key_telec = types.InlineKeyboardButton(text='–¢–µ–ª–µ—Ü', callback_data='zodiac')
        keyboard.add(key_telec)
        key_bliznecy = types.InlineKeyboardButton(text='–ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data='zodiac')
        keyboard.add(key_bliznecy)
        key_rak = types.InlineKeyboardButton(text='–†–∞–∫', callback_data='zodiac')
        keyboard.add(key_rak)
        key_lev = types.InlineKeyboardButton(text='–õ–µ–≤', callback_data='zodiac')
        keyboard.add(key_lev)
        key_deva = types.InlineKeyboardButton(text='–î–µ–≤–∞', callback_data='zodiac')
        keyboard.add(key_deva)
        key_vesy = types.InlineKeyboardButton(text='–í–µ—Å—ã', callback_data='zodiac')
        keyboard.add(key_vesy)
        key_scorpion = types.InlineKeyboardButton(text='–°–∫–æ—Ä–ø–∏–æ–Ω', callback_data='zodiac')
        keyboard.add(key_scorpion)
        key_strelec = types.InlineKeyboardButton(text='–°—Ç—Ä–µ–ª–µ—Ü', callback_data='zodiac')
        keyboard.add(key_strelec)
        key_kozerog = types.InlineKeyboardButton(text='–ö–æ–∑–µ—Ä–æ–≥', callback_data='zodiac')
        keyboard.add(key_kozerog)
        key_vodoley = types.InlineKeyboardButton(text='–í–æ–¥–æ–ª–µ–π', callback_data='zodiac')
        keyboard.add(key_vodoley)
        key_ryby = types.InlineKeyboardButton(text='–†—ã–±—ã', callback_data='zodiac')
        keyboard.add(key_ryby)
        bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', reply_markup=keyboard)

        @bot.callback_query_handler(func=lambda call: True)
        def callback_worker(call):
            if call.data == "zodiac":
                msg = random.choice(first) + ' ' + random.choice(second) + ' ' + random.choice(
                    second_2) + ' ' + random.choice(third)
                bot.send_message(message.chat.id, msg, )

    elif message.text == "–°–æ–∑–¥–∞–π —Å–≤–æ–π –Ω–∏–∫":
        bot.send_message(message.chat.id, text=get_nickname())
    elif message.text == "–ê–Ω–µ–∫–¥–æ—Ç—ã":
        bot.send_message(message.chat.id, text=get_anekdot())
    elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å–∏—á–∫—É":
        contents = requests.get('https://randomfox.ca/floof').json()
        urlCAT = contents['image']
        bot.send_photo(message.chat.id, photo=urlCAT)



@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
    user_data = maps[query.message.chat.id]
    new_x, new_y = user_data['x'], user_data['y']

    if query.data == 'left':
        new_x -= 1
    if query.data == 'right':
        new_x += 1
    if query.data == 'up':
        new_y -= 1
    if query.data == 'down':
        new_y += 1

    if new_x < 0 or new_x > 2 * cols - 2 or new_y < 0 or new_y > rows * 2 - 2:
        return None
    if user_data['map'][new_x + new_y * (cols * 2 - 1)]:
        return None

    user_data['x'], user_data['y'] = new_x, new_y

    if new_x == cols * 2 - 2 and new_y == rows * 2 - 2:
        bot.edit_message_text(chat_id=query.message.chat.id,
                              message_id=query.message.id,
                              text="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏")
        return None

    bot.edit_message_text(chat_id=query.message.chat.id,
                          message_id=query.message.id,
                          text=get_map_str(user_data['map'], (new_x, new_y)),
                          reply_markup=keyboard)


# -----------------------------------------------------------------------
def get_anekdot():
    array_anekdots = []
    req_anek = requests.get('http://anekdotme.ru/random')
    soup = bs4.BeautifulSoup(req_anek.text, "html.parser")
    result_find = soup.select('.anekdot_text')
    for result in result_find:
        array_anekdots.append(result.getText().strip())
    return array_anekdots[0]


bot.polling(none_stop=True, interval=0)


def get_nickname():
    array_names = []
    req_names = requests.get("https://ru.nickfinder.com")
    soup = bs4.BeautifulSoup(req_names.text, "html.parser")
    result_find = soup.findAll(class_='one_generated_variant vt_df_bg')
    for result in result_find:
        array_names.append(result.getText())
    return array_names[0]


bot.polling(none_stop=True, interval=0)

print()
